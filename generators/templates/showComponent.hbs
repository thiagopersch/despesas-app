'use client';

import CTA from '@/components/CTA';
import ContainerTable from '@/components/ContainerTable';
import StatusIcon from '@/components/StatusTable';
import NoRow from '@/components/Table/NoRow';
import { useDelete{{pascalCase name}}WithConfirmation } from '@/hooks/useDelete{{pascalCase name}}WithConfirmation';
import { {{pascalCase name}}, Formatted{{pascalCase name}} } from '@/model/{{pascalCase name}}';
import { list{{pascalCase name}} } from '@/requests/queries/{{camelCase name}}';
import DeleteIcon from '@mui/icons-material/DeleteOutlined';
import EditIcon from '@mui/icons-material/Edit';
import { Tooltip } from '@mui/material';
import Button from '@mui/material/Button';
import {
DataGrid,
GridActionsCellItem,
GridColDef,
GridRowId,
GridRowModesModel,
} from '@mui/x-data-grid';
import { useQuery } from '@tanstack/react-query';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import * as React from 'react';
import Edit{{pascalCase name}}Modal from '../Edit';

const Show{{pascalCase name}} = () => {
const [rows, setRows] = React.useState<Formatted{{pascalCase name}}[]>([]);
const [openPopup, setOpenPopup] = React.useState(false);
const [{{pascalCase name}}ToEdit, set{{pascalCase name}}ToEdit] = React.useState<{{pascalCase name}}>();
const [rowModesModel, setRowModesModel] = React.useState<GridRowModesModel>(
{},
);

const {
data: {{pascalCase name}},
isError,
isLoading,
refetch,
} = useQuery<Formatted{{pascalCase name}}[]>({
queryKey: ['get-{{pascalCase name}}'],
queryFn: () => list{{pascalCase name}}(),
});

React.useEffect(() => {
if ({{pascalCase name}}) {
setRows({{pascalCase name}});
}
}, [{{pascalCase name}}]);

const { data: session } = useSession();
const { confirmDelete, renderDeletePopup } =
useDelete{{pascalCase name}}WithConfirmation(session);

const handleSaveClick = (id: GridRowId) => () => {
const {{pascalCase name}}ToEdit = rows.find((row) => row.id === id);
if ({{pascalCase name}}ToEdit) {
setOpenPopup(true);
set{{pascalCase name}}ToEdit({{pascalCase name}}ToEdit);
}
};

const handleDeleteClick = (id: GridRowId) => () => {
try {
const {{pascalCase name}}ToDelete = rows.find((row) => row.id === id);
if ({{pascalCase name}}ToDelete) {
confirmDelete({{pascalCase name}}ToDelete);
const updatedRows = rows.filter((row) => row.id === id);
setRows(updatedRows);
}
} catch (error) {
console.log(error);
} finally {
refetch();
}
};

const columns: GridColDef[] = [
{ field: 'name', headerName: 'Nome', width: 350, editable: false },
{
field: 'status',
headerName: 'Situação',
width: 350,
editable: false,
renderCell: (params) => {
return <StatusIcon status={params.value} />;
},
},
{
field: 'formattedCreatedAt',
headerName: 'Criado em',
type: 'string',
width: 350,
editable: false,
},
{
field: 'formattedUpdatedAt',
headerName: 'Atualizado em',
type: 'string',
width: 350,
editable: false,
},
{
field: 'actions',
type: 'actions',
headerName: 'Ações',
width: 200,
cellClassName: 'actions',
getActions: ({ id }) => {
return [
<Tooltip title="Editar" key="edit">
<GridActionsCellItem
icon={<EditIcon />}
label="Edit"
onClick={handleSaveClick(id)}
color="primary"
/>
</Tooltip>,
<Tooltip title="Deletar" key="delete">
<GridActionsCellItem
icon={<DeleteIcon />}
label="Delete"
onClick={handleDeleteClick(id)}
color="error"
/>
</Tooltip>,
];
},
},
];

if (isError) {
return <div>Error loading data...</div>;
}

return (
<>
  <ContainerTable>
    <CTA>
      <Link href={`/{{camelCase name}}/create`}>
      <Button variant="contained" color="success" size="large">Cadastrar</Button>
      </Link>
    </CTA>
    {{!-- <DataGrid
      rows={rows}
      columns={columns}
      editMode="cell"
      rowModesModel={rowModesModel}
      loading={isLoading}
      checkboxSelection
      autoHeight
      pageSizeOptions={[10, 50, 100]}
      initialState={{ pagination: { paginationModel: { page: 0, pageSize: 10 }, }, sorting: { sortModel: [{ field: 'name', sort: 'asc' }], }, }}
      slots={{ noRowsOverlay: NoRow }}
      slotProps={{ toolbar: { setRows, setRowModesModel } }}
      sx={{ "--DataGrid-overlayHeight": '18.75rem' }} /> --}}
  </ContainerTable>

  {openPopup && (
  {{!-- <Edit{{pascalCase name}}Modal handleClose={()=> setOpenPopup(false)}
    {{pascalCase name}}={{{pascalCase name}}ToEdit}
      id={{{pascalCase name}}ToEdit?.id}
    /> --}}
  )}

  {renderDeletePopup()}
</>

);
};

export default Show{{pascalCase name}};
